version: 2.1
orbs:
  cypress: cypress-io/cypress@3.3.1

pr_only: &pr_only
  filters:
    branches:
      ignore: main

commands:
  aws-auth:
    steps:
      - run:
          name: Obtain Temporary AWS creds
          command: |
            
            export AWS_ROLE_ARN=arn:aws:iam::386710959426:role/hcl-playground-ci
            export AWS_DEFAULT_REGION=us-east-1

            if ! command -v aws &> /dev/null; then
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install --update

                which aws
            else
                echo "awscli is already installed."
            fi

            # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
              $(aws sts assume-role-with-web-identity \
               --role-arn ${AWS_ROLE_ARN} \
               --role-session-name "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}" \
               --web-identity-token $CIRCLE_OIDC_TOKEN \
               --duration-seconds 3600 \
               --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
               --output text)

            # Export AWS credentials to BASH_ENV for consumption in subsequent jobs
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $BASH_ENV

            source $BASH_ENV

            # interact with AWS
            aws --no-cli-pager sts get-caller-identity

jobs:
  push-image:
    docker:
      - image: cimg/base:stable
    parameters:
      ecr_repo_name:
        type: string
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - aws-auth
      - run:
          name: Build and push Docker image
          command: |
            TAG=386710959426.dkr.ecr.us-east-1.amazonaws.com/hcl-playground-development:${CIRCLE_SHA1}
            docker build -t $TAG .
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 386710959426.dkr.ecr.us-east-1.amazonaws.com
            docker push $TAG

  eks-deploy:
    docker:
      - image: cimg/base:stable
    parameters:
      eks_cluster_name:
        type: string
    steps:
      - checkout
      - aws-auth
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Set up Kubernetes configuration
          command: |
            aws eks --region us-east-1 update-kubeconfig --name hcl-playground-development
      - run:
          name: Replace image name in Kubernetes deployment file
          command: |
            sed -i 's|{{IMAGE_NAME}}|386710959426.dkr.ecr.us-east-1.amazonaws.com/hcl-playground-development:${CIRCLE_SHA1}|' ./deployment/k8s/development/deployment.yml
      - run:
          name: Deploy to EKS
          command: |
            kubectl apply -f ./deployment/k8s/development/deployment.yml
            kubectl rollout status deployment/hcl-playground-development

  test:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - aws-auth
      - run:
          name: Pull and run test image
          command: |
            TAG=386710959426.dkr.ecr.us-east-1.amazonaws.com/hcl-playground-development:${CIRCLE_SHA1}
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 386710959426.dkr.ecr.us-east-1.amazonaws.com
            docker pull $TAG
            docker run -p 8080:8000 -v /tmp:/scratch $TAG
          background: true
      - cypress/install
      - cypress/run-tests

  setup-infra:
    docker:
      - image: cimg/base:stable
    parameters:
      project_path:
        type: string
      auto_approve:
        type: boolean
        default: false
    steps:
      - checkout
      - run:
          name: Install tfenv
          command: |
            git clone https://github.com/tfutils/tfenv.git ~/.tfenv
            echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Install Terraform version
          command: |
            tfenv install 1.7.4
            tfenv use 1.7.4
      - aws-auth
      - run:
          name: Terraform init
          command: |
            cd <<parameters.project_path>>
            terraform init
      - run:
          name: Terraform plan
          command: |
            cd <<parameters.project_path>>
            terraform plan
      - run:
          name: Terraform apply
          command: |
            cd <<parameters.project_path>>
            terraform apply <<#parameters.auto_approve>> --auto-approve <</parameters.auto_approve>>

workflows:
  build-deploy-dev:
    jobs:
      - setup-infra:
          project_path: deployment/terraform/development
          auto_approve: true
      - push-image:
          <<: *pr_only
          ecr_repo_name: hcl-playground-development
      - test:
          <<: *pr_only
          requires:
            - push-image
      - eks-deploy:
          <<: *pr_only
          eks_cluster_name: hcl-playground-development
          requires:
            - setup-infra
            - test